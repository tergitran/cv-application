{"version":3,"sources":["components/Display/Display.module.css","components/Button/Button.module.css","components/GeneralInformation/GeneralInformation.js","components/EducationalExperience/EducationalExperience.js","components/PracticalExperience/PracticalExperience.js","components/Button/Button.js","components/Display/Display.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GeneralInformation","props","generalInfor","name","email","phoneNumber","className","type","onChange","e","handleChange","section","value","EducationalExperience","educationalExp","school","titleOfStudy","dateOfStudy","console","log","defaultValue","PracticalExperience","practicalExp","company","positionTitle","mainTasks","style","display","flexDirection","justifyContent","width","border","height","margin","Button","onClick","clicked","styles","children","Display","infor","Contact","Avatar","Img","Education","Experience","App","target","inputChanged","state","periodOfTime","setState","togglePage","isEditing","start","end","page","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gGACAA,EAAOC,QAAU,CAAC,IAAM,qBAAqB,OAAS,wBAAwB,QAAU,yBAAyB,QAAU,yBAAyB,UAAY,2BAA2B,WAAa,8B,sBCAxMD,EAAOC,QAAU,CAAC,OAAS,yB,sMCmBZC,G,MAlBY,SAACC,GAAU,IAAD,EACEA,EAAMC,aAAlCC,EAD0B,EAC1BA,KAAMC,EADoB,EACpBA,MAAOC,EADa,EACbA,YACpB,OACI,yBAAKC,UAAU,wBACX,mDACA,sCACI,2BAAOC,KAAK,OAAOC,SAAU,SAACC,GAAD,OAAKR,EAAMS,aAAaD,EAAGR,EAAMU,UAAUC,MAAOT,EAAMA,KAAK,UAE9F,uCACI,2BAAOI,KAAK,QAAQC,SAAU,SAACC,GAAD,OAAKR,EAAMS,aAAaD,EAAGR,EAAMU,UAAUC,MAAOR,EAAOD,KAAK,WAEhG,8CACI,2BAAOI,KAAK,OAAOC,SAAU,SAACC,GAAD,OAAKR,EAAMS,aAAaD,EAAGR,EAAMU,UAAUC,MAAOP,EAAaF,KAAK,cCoBlGU,EAhCe,SAACZ,GAAW,IAAD,EACSA,EAAMa,eAA5CC,EAD6B,EAC7BA,OAAQC,EADqB,EACrBA,aAAcC,EADO,EACPA,YAG9B,OAFAC,QAAQC,IAAIF,EAAaF,GAGrB,yBAAKT,UAAU,0BACX,sDACA,6CACI,2BACIC,KAAK,OACLC,SAAU,SAACC,GAAD,OAAOR,EAAMS,aAAaD,EAAGR,EAAMU,UAC7CR,KAAK,SACLS,MAAOG,KAEf,gDACI,2BACIR,KAAK,OACLC,SAAU,SAACC,GAAD,OAAOR,EAAMS,aAAaD,EAAGR,EAAMU,UAC7CR,KAAK,eACLS,MAAOI,KAEf,+CACI,2BACIT,KAAK,OACLC,SAAU,SAACC,GAAD,OAAOR,EAAMS,aAAaD,EAAGR,EAAMU,UAC7CR,KAAK,cACLiB,aAAcH,OCanBI,EAvCa,SAACpB,GAAU,IAAD,EAEUA,EAAMqB,aAA3CC,EAF2B,EAE3BA,QAASC,EAFkB,EAElBA,cAAeC,EAFG,EAEHA,UAE/B,OACI,yBAAKnB,UAAU,wBACX,oDACA,8CACI,2BACIC,KAAK,OACLJ,KAAK,UACLK,SAAU,SAACC,GAAD,OAAKR,EAAMS,aAAaD,EAAGR,EAAMU,UAC3CC,MAAOW,KAEf,gDACI,2BACIhB,KAAK,QACLJ,KAAK,gBACLK,SAAU,SAACC,GAAD,OAAKR,EAAMS,aAAaD,EAAGR,EAAMU,UAC3CC,MAAOY,KAEf,4CACI,2BACIjB,KAAK,OACLJ,KAAK,YACLK,SAAU,SAACC,GAAD,OAAKR,EAAMS,aAAaD,EAAGR,EAAMU,UAC3CC,MAAOa,KAEf,qDACI,yBAAKC,MAAO,CAACC,QAAS,OAAQC,cAAe,MAAOC,eAAgB,iBAChE,2BAAO1B,KAAK,QAAQuB,MAAO,CAACI,MAAO,MAAOC,OAAQ,kBAAmBC,OAAQ,QAASzB,KAAK,OAAOC,SAAU,SAACC,GAAD,OAAKR,EAAMS,aAAaD,EAAGR,EAAMU,YAC7I,uBAAGe,MAAO,CAACM,OAAQ,OAAQC,OAAQ,IAAnC,UACA,2BAAO9B,KAAK,MAAMuB,MAAO,CAACI,MAAO,MAAOC,OAAQ,kBAAmBC,OAAQ,QAASzB,KAAK,OAAOC,SAAU,SAACC,GAAD,OAAKR,EAAMS,aAAaD,EAAGR,EAAMU,gB,gBCzBhJuB,EANA,SAACjC,GACZ,OACI,4BAAQkC,QAASlC,EAAMmC,QAAS9B,UAAW+B,IAAOH,QAASjC,EAAMqC,W,gBCkC1DC,EApCC,SAACtC,GAAU,IAAD,EAC+BA,EAAMuC,MAApDtC,EADe,EACfA,aAAcY,EADC,EACDA,eAAgBQ,EADf,EACeA,aACrC,OACI,yBAAKhB,UAAW+B,IAAOE,SACnB,yBAAKjC,UAAW+B,IAAOI,SACnB,yBAAKnC,UAAW+B,IAAOK,QACnB,yBAAKpC,UAAW+B,IAAOM,MACvB,4BAAKzC,EAAaC,OAEtB,qCACA,2BAAID,EAAaG,aACjB,qCACA,2BAAIH,EAAaE,QAErB,yBAAKE,UAAW+B,IAAOO,WACnB,yCACA,sCACA,2BAAI9B,EAAeC,QACnB,8CACA,2BAAID,EAAeE,cACnB,6CACA,2BAAIF,EAAeG,cAEvB,yBAAKX,UAAW+B,IAAOQ,YACnB,oDACA,uCACA,2BAAG,8BAAOvB,EAAaC,UACvB,wCACA,2BAAID,EAAaE,eACjB,0CACA,2BAAIF,EAAaG,cC2ElBqB,E,kDAnGb,aAAe,IAAD,8BACZ,gBA0BFpC,aAAe,SAACD,EAAGE,GACjB,IAAMR,EAAOM,EAAEsC,OAAO5C,KAClBS,EAAQH,EAAEsC,OAAOnC,MAEjBoC,EAAe,KAEnB,OAAOrC,GACL,IAAK,eACHqC,EAAY,eAAO,EAAKC,MAAM/C,cAC9B,MACF,IAAK,iBACH8C,EAAY,eAAO,EAAKC,MAAMnC,gBAC9B,MACF,IAAK,eACHkC,EAAY,eAAO,EAAKC,MAAM3B,cAKxB,UAAPnB,GAAuB,QAAPA,EACjB6C,EAAaE,aAAa/C,GAAQS,EAElCoC,EAAa7C,GAAQS,EAGvB,EAAKuC,SAAL,eACGxC,EAAUqC,KArDD,EA0DdI,WAAa,WACX,EAAKD,SAAS,CACZE,WAAY,EAAKJ,MAAMI,aAzDzB,EAAKJ,MAAQ,CACX/C,aAAc,CACZC,KAAM,qBACNC,MAAO,sBACPC,YAAa,cAEfS,eAAgB,CACdC,OAAQ,MACRC,aAAc,yBACdC,YAAa,cAEfK,aAAc,CACZC,QAAS,iBACTC,cAAe,qBACfC,UAAW,iGACXyB,aAAc,CACZI,MAAO,GACPC,IAAK,KAGTF,WAAW,GAvBD,E,qDAkEZ,IAAIG,EAAO,kBAAC,EAAD,CAAShB,MAAOiB,KAAKR,QAmBhC,OAlBGQ,KAAKR,MAAMI,YACZG,EAAO,6BACP,kBAAC,EAAD,CACE9C,aAAc+C,KAAK/C,aACnBR,aAAcuD,KAAKR,MAAM/C,aACzBS,QAAQ,iBACV,kBAAC,EAAD,CACED,aAAc+C,KAAK/C,aACnBI,eAAgB2C,KAAKR,MAAMnC,eAC3BH,QAAQ,mBACV,kBAAC,EAAD,CACED,aAAc+C,KAAK/C,aACnBY,aAAgBmC,KAAKR,MAAM3B,aAC3BX,QAAQ,mBAMV,yBAAKL,UAAU,OAEVkD,EACD,6BACE,kBAAC,EAAD,CAAQpB,QAAWqB,KAAKL,YAAaK,KAAKR,MAAMI,UAAU,SAAS,c,GA5F7DK,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3D,QAAQ2D,MAAMA,EAAMC,c","file":"static/js/main.a2cef6ce.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Img\":\"Display_Img__a_-Q0\",\"Avatar\":\"Display_Avatar__1RkB5\",\"Display\":\"Display_Display__1uqKk\",\"Contact\":\"Display_Contact__3MaH1\",\"Education\":\"Display_Education__2L4bQ\",\"Experience\":\"Display_Experience__2HcAt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__3pajz\"};","import React from 'react';\r\n\r\nconst GeneralInformation = (props)=> {\r\n    const {name, email, phoneNumber} = props.generalInfor;\r\n    return (\r\n        <div className='Section GeneralInfor'>\r\n            <h3>General Information</h3>\r\n            <label>Name\r\n                <input type='text' onChange={(e)=>props.handleChange(e, props.section)} value={name} name='name'></input>\r\n            </label>\r\n            <label>Email\r\n                <input type='email' onChange={(e)=>props.handleChange(e, props.section)} value={email} name='email'></input>\r\n            </label>\r\n            <label>Phone number\r\n                <input type='text' onChange={(e)=>props.handleChange(e, props.section)} value={phoneNumber} name='phone'></input>\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GeneralInformation;","import React from 'react';\r\n\r\nconst EducationalExperience = (props) => {\r\n    const { school, titleOfStudy, dateOfStudy } = props.educationalExp;\r\n    console.log(dateOfStudy, school);\r\n\r\n    return (\r\n        <div className='Section EducationalExp'>\r\n            <h3>Educational Experience</h3>\r\n            <label>School name\r\n                <input\r\n                    type='text'\r\n                    onChange={(e) => props.handleChange(e, props.section)}\r\n                    name='school'\r\n                    value={school}></input>\r\n            </label>\r\n            <label>Title of study\r\n                <input\r\n                    type='text'\r\n                    onChange={(e) => props.handleChange(e, props.section)}\r\n                    name='titleOfStudy'\r\n                    value={titleOfStudy}></input>\r\n            </label>\r\n            <label>Date of study\r\n                <input\r\n                    type='date'\r\n                    onChange={(e) => props.handleChange(e, props.section)}\r\n                    name='dateOfStudy'\r\n                    defaultValue={dateOfStudy}></input>\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EducationalExperience;","import React from 'react';\r\n\r\nconst PracticalExperience = (props)=> {\r\n\r\n    const {company, positionTitle, mainTasks} = props.practicalExp;\r\n    \r\n    return (\r\n        <div className='Section PracticalExp'>\r\n            <h3>Practical Experience</h3>\r\n            <label>Company Name\r\n                <input \r\n                    type='text' \r\n                    name='company' \r\n                    onChange={(e)=>props.handleChange(e, props.section)}\r\n                    value={company}></input>\r\n            </label>\r\n            <label>Position Title\r\n                <input \r\n                    type='email' \r\n                    name='positionTitle' \r\n                    onChange={(e)=>props.handleChange(e, props.section)}\r\n                    value={positionTitle}></input>\r\n            </label>\r\n            <label>Main Tasks\r\n                <input \r\n                    type='text' \r\n                    name='mainTasks' \r\n                    onChange={(e)=>props.handleChange(e, props.section)}\r\n                    value={mainTasks}></input>\r\n            </label>\r\n            <label>Date from and until\r\n                <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'space-around'}}>\r\n                    <input name='start' style={{width: '30%', border: '1px solid black', height: '25px'}} type='date' onChange={(e)=>props.handleChange(e, props.section)}></input>\r\n                    <p style={{height: '25px', margin: 0}}>â†’</p>\r\n                    <input name='end' style={{width: '30%', border: '1px solid black', height: '25px'}} type='date' onChange={(e)=>props.handleChange(e, props.section)}></input>\r\n                </div>\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PracticalExperience;","import React from 'react';\r\nimport styles from './Button.module.css';\r\n\r\nconst Button = (props)=> {\r\n    return(\r\n        <button onClick={props.clicked} className={styles.Button}>{props.children}</button>\r\n    );\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport styles from './Display.module.css';\r\n\r\nconst Display = (props)=> {\r\n    const {generalInfor, educationalExp, practicalExp} = props.infor;\r\n    return(\r\n        <div className={styles.Display}>\r\n            <div className={styles.Contact}>\r\n                <div className={styles.Avatar}>\r\n                    <div className={styles.Img}></div>\r\n                    <h2>{generalInfor.name}</h2>\r\n                </div>\r\n                <h5>Phone</h5>\r\n                <p>{generalInfor.phoneNumber}</p>\r\n                <h5>Email</h5>\r\n                <p>{generalInfor.email}</p>\r\n            </div>\r\n            <div className={styles.Education}>\r\n                <h2>Education</h2>\r\n                <h5>School</h5>\r\n                <p>{educationalExp.school}</p>\r\n                <h5>Field of Study</h5>\r\n                <p>{educationalExp.titleOfStudy}</p>\r\n                <h5>Date of study</h5>\r\n                <p>{educationalExp.dateOfStudy}</p>\r\n            </div>\r\n            <div className={styles.Experience}>\r\n                <h2>Practical Experience</h2>\r\n                <h5>Company</h5>\r\n                <p><span>{practicalExp.company}</span></p>\r\n                <h5>Position</h5>\r\n                <p>{practicalExp.positionTitle}</p>\r\n                <h5>Main Tasks</h5>\r\n                <p>{practicalExp.mainTasks}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Display;","import React from 'react';\nimport './App.css';\nimport GeneralInfor from './components/GeneralInformation/GeneralInformation';\nimport EducationalExperience from './components/EducationalExperience/EducationalExperience';\nimport PracticalExperience from './components/PracticalExperience/PracticalExperience';\nimport Button from './components/Button/Button';\nimport Display from './components/Display/Display';\nclass App extends React.Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      generalInfor: {\n        name: 'Tráº§n Dáº§n',\n        email: 'Tergitran@gmail.com',\n        phoneNumber: '0982548515'\n      },\n      educationalExp: {\n        school: 'UIT',\n        titleOfStudy: 'Information Technology',\n        dateOfStudy: '1998-11-02'\n      },\n      practicalExp: {\n        company: 'KMS Technology',\n        positionTitle: 'ReactJS developer ',\n        mainTasks: 'Design UI using vanila CSS and Material-ui framework. Manipulate between components by ReactJS',\n        periodOfTime: {\n          start: '',\n          end: ''\n        }\n      },\n      isEditing: false\n    };\n  }\n\n  handleChange = (e, section)=> {\n    const name = e.target.name;\n    let value = e.target.value;\n\n    let inputChanged = null;\n\n    switch(section) {\n      case 'generalInfor':\n        inputChanged = {...this.state.generalInfor};\n        break;\n      case 'educationalExp':\n        inputChanged = {...this.state.educationalExp};\n        break;\n      case 'practicalExp':\n        inputChanged = {...this.state.practicalExp};\n        break;\n    }\n\n\n    if(name==='start'||name==='end') {\n      inputChanged.periodOfTime[name] = value;\n    } else {\n      inputChanged[name] = value;\n    }\n\n    this.setState({\n      [section]: inputChanged\n    })\n    // console.log(value);\n  }\n\n  togglePage = ()=> {\n    this.setState({\n      isEditing: !this.state.isEditing\n    })\n  }\n\n  render() {\n\n    let page = <Display infor={this.state}/>;\n    if(this.state.isEditing) {\n      page = <div>\n      <GeneralInfor \n        handleChange={this.handleChange} \n        generalInfor={this.state.generalInfor} \n        section='generalInfor'></GeneralInfor>\n      <EducationalExperience \n        handleChange={this.handleChange} \n        educationalExp={this.state.educationalExp} \n        section='educationalExp'></EducationalExperience>\n      <PracticalExperience \n        handleChange={this.handleChange} \n        practicalExp = {this.state.practicalExp }\n        section='practicalExp'\n        ></PracticalExperience>\n    </div>\n    }\n\n    return (\n      <div className=\"App\">\n          {/* <h1>CV Application</h1> */}\n          {page}\n          <div>\n            <Button clicked = {this.togglePage}>{this.state.isEditing?\"Submit\":\"Edit\"}</Button>\n            {/* <Button>Submit</Button> */}\n          </div>\n          \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}